---
title: "Car industry example"
---

To reproduce this example, you need to register to
Insee's API and configure `pynsee`. Go check @sec-config for
details. 

## Dependencies

```{python}
import geopandas
import pandas as pd
import numpy as np
import pyproj
from shapely.ops import transform

import matplotlib.pyplot as plt
import matplotlib, descartes
import matplotlib.cm as cm
from matplotlib.offsetbox import AnchoredText

import pynsee
```

## Getting data

We will use two functions to get businesses datasets :

- `pynsee.get_activity_list` to get relevent classification
- `pynsee.search_sirene` to find car industry (SIRET with _'29.10Z'_)

```{python}
# get activity list
naf5 = pynsee.get_activity_list('NAF5')

# search data in SIRENE database
data = pynsee.search_sirene(variable = "activitePrincipaleEtablissement",
                   pattern = '29.10Z', kind = 'siret')
```

We also want to automatically retrieve administration
borders at _departement_ level.
We can use :

- `pynsee.get_geodata` to retrieve borders
- `translate` method to put French islands (DROM) close to France metropolitan area

```{python}
# get map - departement limits
geodataList =  pynsee.get_geodata_list()
mapdep = pynsee.get_geodata('ADMINEXPRESS-COG-CARTO.LATEST:departement')
mapdep = mapdep.translate()

# conversion to geopandas df
mapdepgeo = geopandas.GeoDataFrame(mapdep)
mapdepgeo.plot()
```


## Feature processing

We will keep only businesses with more then 100 employees

```{python}
df = data.loc[data['effectifsMinEtablissement'] > 100]
df = df.reset_index(drop=True)
```

`df` is a `pandas DataFrame` supercharged with a few 
convenient methods. One of them is `get_location` that 
helps finding longitude and latitudes of businesses:

```{python}
# find latitude and longitude of all businesses
df = df.get_location()
```

We finally transform that in `geopandas.GeoDataFrame` 
to prepare a map. 

```{python}
# make geodataframe
gdf = geopandas.GeoDataFrame(df)
gdf = gdf.reset_index(drop=True)
gdf = gdf.sort_values(by=['effectifsMinEtablissement'], ascending=False)
```

Let's keep the following list of car constructors: 

```{python}
# make cleaned labels
match_list = ['RENAULT SAS', 'ALPINE', 'BATILLY', 'MAUBEUGE CONSTRUCTION',
              'TOYOTA', 'PSA AUTOMOBILES', 'VEHICULES LEGERS DU NORD', 'RENAULT TRUCKS']
```

```{python}
other_string_list = '|'.join(['[^' + x + ']' for x in match_list])
conditions = [gdf['denominationUniteLegale'].str.contains(x) for x in match_list]
conditions += [gdf['denominationUniteLegale'].str.contains(other_string_list)]
values = ['RENAULT SAS', 'RENAULT SAS', 'RENAULT SAS', 'RENAULT SAS',
          'TOYOTA', 'PSA AUTOMOBILES','PSA AUTOMOBILES', 'RENAULT TRUCKS', 'OTHER']

gdf['label'] = np.select(conditions, values)
```

```{python}
gdf = gdf.set_crs(4326).to_crs(3857)
```

## Map

```{python}
# annotation
txt = 'Circles are proportionate to the minimum of the employee number range'
txt += '\nIf headcount is missing in SIRENE database, some factories may not be displayed'

#plot
ax = mapdepgeo.plot(color='white', edgecolor='black', figsize = (15,7))
plt.title('Automotive industry sites in France')
gdf.plot(ax=ax,
         column = 'label',
         edgecolor='white',
         markersize=gdf.effectifsMinEtablissement/5,
         legend=True,
         legend_kwds={'bbox_to_anchor': (1,1),
                       'loc':1, 'borderaxespad': 0})

at = AnchoredText(txt, prop=dict(size=9), frameon=True, loc='lower left')
ax.add_artist(at)

plt.show()
```

## Prerequisite {#sec-config}

- Subscribe to https://api.insee.fr/catalogue/ and get your credentials!
- Save your credentials with `init_conn` function:

```{python}
#| eval: false

# Initialize key
from pynsee.utils.init_conn import init_conn
init_conn(insee_token="my_insee_token")
```

- Beware: any change to the keys should be tested after clearing the cache

```{python}
#| eval: false

# clear registered keys
from pynsee.utils import clear_all_cache; clear_all_cache()
```
